generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model user {
  id         Int       @id @default(autoincrement())
  name       String
  age        Int?
  email      String    @unique
  password   String
  profile    String
  role       Role      @default(USER)
  products   product[]
  otp        String?
  otpExpiry  DateTime?
  resetToken String?
  cart       cart[]
  address    address[]
  orders     order[]      
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model product {
  id             Int        @id @default(autoincrement())
  name           String
  price          Float
  image          String?
  userId         Int
  categories     category[] @relation("productCategories")
  user           user       @relation(fields: [userId], references: [id])
  stock          Int        @default(2)
  is_new_arrival Boolean    
  is_active      Boolean    
  tag            String[]
  variants       variant[]
  slug           String     @unique
  cartItem       cartItem[]
  order          orderItem[]
  description    String 
}

model variant {
  id            Int            @id @default(autoincrement())
  description   String
  specification Json
  Price         Float
  stock         Int
  images        variantimage[]
  product       product        @relation(fields: [productId], references: [id])
  productId     Int
  cartItem      cartItem[]
  orderItems    orderItem[]
}

model variantimage {
  id        Int     @id @default(autoincrement())
  url       String
  variantId Int
  variant   variant @relation(fields: [variantId], references: [id])
}

model category {
  id            Int        @id @default(autoincrement())
  name          String     @unique
  parentId      Int?
  parent        category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories category[] @relation("CategoryHierarchy")
  products      product[]  @relation("productCategories")
}

model cart {
  id        Int        @id @default(autoincrement())
  user      user       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     cartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model cartItem {
  id        Int      @id @default(autoincrement())
  cart      cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   product? @relation(fields: [productId], references: [id])
  productId Int?
  variant   variant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())
}

model address {
  id          Int      @id @default(autoincrement())
  userId      Int
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  addressType AddressType
  user        user     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

enum AddressType {
  BILLING
  DELIVERY
}



enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model order {
   id               Int           @id @default(autoincrement())
  userId            Int?
  guestemail        String?
  subTotal          Float
  tax               Float
  discount          Float
  deliveryCharge    Float
  finalTotal        Float
  billingAddress    String
  deliveryAddress   String
  status           OrderStatus   @default(PENDING)
  is_payment_done  Boolean 
  createdAt         DateTime      @default(now())
  user              user   ?       @relation(fields: [userId], references: [id])
  orderItems        orderItem[]
  payment           Payment?
}

model orderItem {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  unitPrice  Float
  quantity   Int
  variantId Int?
  variant   variant? @relation(fields: [variantId], references: [id])
  order      order   @relation(fields: [orderId], references: [id])
  product    product @relation(fields: [productId], references: [id])
}

model Payment {
  id               Int            @id @default(autoincrement())
  orderId          Int            @unique
  paymentType      String         
  transactionId    String?
  status           PaymentStatus  @default(PENDING)
  paymentDatetime  DateTime?

  order            order          @relation(fields: [orderId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}
